<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>索引技术 | 2-3树 B树</title>
      <link href="/2018/05/22/suanfajichu/Index_skill/"/>
      <url>/2018/05/22/suanfajichu/Index_skill/</url>
      <content type="html"><![CDATA[<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><h2 id="线性索引"><a href="#线性索引" class="headerlink" title="线性索引"></a>线性索引</h2><h2 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h2><h2 id="树状索引"><a href="#树状索引" class="headerlink" title="树状索引"></a>树状索引</h2><h3 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h3><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h3>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式 | 模板方法模式</title>
      <link href="/2018/05/18/design-mode/template-method-pattern/"/>
      <url>/2018/05/18/design-mode/template-method-pattern/</url>
      <content type="html"><![CDATA[<h1 id="模板方法用于封装算法"><a href="#模板方法用于封装算法" class="headerlink" title="模板方法用于封装算法"></a>模板方法用于封装算法</h1><p>这个模式在复习排序算法得时候用到</p><p>## </p><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>写算法要尽量避免解决重复的问题，设计类的时候则要尽可能抽取所有的共同点<br><strong>本博客可能存在理解不深导致的错误</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《Head First设计模式（中文版）》 277页</p>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法基础 | 归并排序</title>
      <link href="/2018/05/18/suanfajichu/Merge_sort/"/>
      <url>/2018/05/18/suanfajichu/Merge_sort/</url>
      <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>归并排序就是把数组切分成多个小段,然后每段分别进行排序<br>有分治的思想体现出来,先切分成小问题,然后再合并成大问题(这次就是在合并的问题上莫名其妙鸽掉了,很可惜)</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><h3 id="迭代实现"><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h3><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>tap4fun的面试，排序算法考的好多,不巧我对具体实现都忘干净了,gg,很可惜<br>还是要自己手写一遍,增加记忆也练练手感</p><hr><p>总感觉自己是个投机主义者。。。</p>]]></content>
      
      
        <tags>
            
            <tag> 算法基础 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>华为笔试-3 | 数据插入到某个报文尾部的方案选择</title>
      <link href="/2018/05/16/bishi-3/"/>
      <url>/2018/05/16/bishi-3/</url>
      <content type="html"><![CDATA[<p>##题目描述</p><p>在转发系统中，报文往往储存在固定长度的缓存当中，通常称这种定长的缓存为PBUF。一个报文可以存储在一个或者多个PBUF中，形成一个PBUF链。报文最多可由16个PBUF组成。PBUF的本身的长度是一致的，称为payload_len。本题中，我们将每个PBUF当前存储的数据简化为两个属性：数据相对于PBUF存储起始位置的偏移(data_offset)和数据长度（data_len）。这些属性的单位均为字节。在报文转发业务实现的过程中，有时需要在报文尾部添加一定长度的数据。添加数据时可能需要多种操作的组合，可以根据需要执行创建新PBUF、将数据从一个PBUF拷贝到另一个PBUF或者将数据移动到本PBUF另一个位置等操作。添加方案的原则是：首先考虑最小化数据搬移，其次考虑最小化新增PBUF。即添加数据的过程如果最后一片PBUF的尾部无法满足添加要求，则优先考虑添加PBUF，而非搬移数据腾出空间。添加的数据应该尽量向较前的PBUF集中。</p><p>以下是一个实例：</p><p>报文由三个PBUF组成，这些PBUF的payload_len都是2048，data_offset和data_len依次是{0,2048}、{0,2048}和{0,1024}</p><p>现在要在报文尾部添加一段200字节长度的数据</p><p>处理完成后，报文的PBUF的属性依次是：</p><p>{0,2048}、{0,2048}和{0,1224}。</p><p>请编程解决一段数据插入到某个报文尾部的方案选择问题。</p><p>输入描述:<br>第一行数据，一个无符号整数表示的PBUF长度（payload_len）；<br>第二行，插入数据的长度，无符号整数。<br>第三行及以后，每行是一个PBUF的属性，即data_offset和data_len，均是无符号整数，用逗号(,)分隔。<br>最后一行以“end”作为结束标记。<br>输入的数据均是正确的，且所有整数都不超过4096，无须进行检查。<br>输出描述:<br>最佳插入方案处理之后的报文所有PBUF的属性，每个PBUF一行，data_offset和data_len都用无符号整数表示，用逗号分隔。</p>]]></content>
      
      
        <tags>
            
            <tag> 笔试题 </tag>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>华为笔试-2 | 求一个表达式得最大值</title>
      <link href="/2018/05/16/bishi-2/"/>
      <url>/2018/05/16/bishi-2/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给出十个数,从中任选三个数作为x,y,z的值,求出x^2 - y^2 + x*y +z 得最小值。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>暴力求解法。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
        <tags>
            
            <tag> 笔试题 </tag>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>华为笔试-1 | 判断数组所占空间大小</title>
      <link href="/2018/05/16/bishi-1/"/>
      <url>/2018/05/16/bishi-1/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给出一个字符串，例如 unsigned int test[100];计算出这个数组所占的字节数。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li>计算数目</li><li>判断格式是否正确</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>不要总用一些莫名其妙的方法导致代码可读性极差。</p>]]></content>
      
      
        <tags>
            
            <tag> 笔试题 </tag>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>上楼梯问题</title>
      <link href="/2018/05/14/DP-1/"/>
      <url>/2018/05/14/DP-1/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>有n个台阶，一次可以走一个或者两个，则上楼有几种方案。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ul><li>状态</li><li>状态转移方程</li><li>无后效性</li><li>子问题图(5个台阶) </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No? </span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2>]]></content>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode 748 | Min Cost Climbing Stairs</title>
      <link href="/2018/05/14/LeetCode-748/"/>
      <url>/2018/05/14/LeetCode-748/</url>
      <content type="html"><![CDATA[<p>##</p>]]></content>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode 746 | Min Cost Climbing Stairs</title>
      <link href="/2018/05/14/LeetCode-746/"/>
      <url>/2018/05/14/LeetCode-746/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).</p><p>Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><blockquote><p>Input: cost = [10, 15, 20]<br>Output: 15<br>Explanation: Cheapest is start on cost[1], pay that cost and go to the top.</p></blockquote><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h3><blockquote><p>Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]<br>Output: 6<br>Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].</p></blockquote><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><ol><li>cost will have a length in the range [2, 1000].</li><li>Every cost[i] will be an integer in the range [0, 999].</li></ol><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ul><li>最优解 走完楼梯花费最少</li><li>状态转移方程</li><li>重叠子问题</li><li>分析<ol><li>F(n) 走n个台阶需要的最小cost</li><li>F(n) = min(F(n-1));</li></ol></li><li>递归的最小条件<ol><li>F(0) = 0;</li><li>F(1) = min(cost[0], cost[1]);</li><li>F(n) = min(F(n-2),F(n-1)) + cost[n];</li></ol></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="备忘录解法"><a href="#备忘录解法" class="headerlink" title="备忘录解法"></a>备忘录解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DP解法"><a href="#DP解法" class="headerlink" title="DP解法"></a>DP解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不要总是拿背包来套</p>]]></content>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>两个链表的第一个公共节点</title>
      <link href="/2018/05/13/Coding-Interviews-52/"/>
      <url>/2018/05/13/Coding-Interviews-52/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>输入两个链表，找出它们的第一个公共结点。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>O(mn)的复杂度,遍历两次</li><li>利用单链表的隐藏特性,两个拥有公共节点的单链表形状是一个Y型,则从其相交之后则相同,则我们可以思考从最后往前进行比较,找到第一个不同的。则后进先出。用栈实现,或者先得到其长度，倒数相同的索引开始向前遍历,找到第一个相同的。但是求长度也需要额外的时间复杂度呀。</li><li>倒置单链表,再从头开始。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">单链表的数据类型</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>可不可以用递归来进行实现呢</p>]]></content>
      
      
        <tags>
            
            <tag> Coding Interviews </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>替换空格</title>
      <link href="/2018/05/13/Coding-Interviews-5/"/>
      <url>/2018/05/13/Coding-Interviews-5/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。<br><a id="more"></a></p></blockquote><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ul><li>C++和java解决本问题有比较关键的区别(字符串存储方式不同)</li><li>StringBuffer.replace(int start, int end, String str)可以在做一些处理后直接替换</li><li><p>本题不适合java</p></li><li><p>具体思路</p><ol><li>先计算出目标字符串的长度</li><li>从字符串尾部向前组织新的字符串</li></ol></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="java自己的解决办法"><a href="#java自己的解决办法" class="headerlink" title="java自己的解决办法"></a>java自己的解决办法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer stringBuffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringBuffer.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stringBuffer.charAt(i) == <span class="string">' '</span>)</span><br><span class="line">                stringBuffer.replace(i, i+<span class="number">1</span>, <span class="string">"%20"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuffer源码"><a href="#StringBuffer源码" class="headerlink" title="StringBuffer源码"></a>StringBuffer源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span> </span>&#123;</span><br><span class="line">    toStringCache = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">super</span>.replace(start, end, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(start);</span><br><span class="line">    <span class="keyword">if</span> (start &gt; count)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">"start &gt; length()"</span>);</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">"start &gt; end"</span>);</span><br><span class="line">    <span class="keyword">if</span> (end &gt; count)</span><br><span class="line">        end = count;</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="keyword">int</span> newCount = count + len - (end - start);</span><br><span class="line">    ensureCapacityInternal(newCount);</span><br><span class="line">    System.arraycopy(value, end, value, start + len, count - end);</span><br><span class="line">    str.getChars(value, start);</span><br><span class="line">    count = newCount;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Coding Interviews </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数组中重复的数字</title>
      <link href="/2018/05/13/Coding-Interviews-3/"/>
      <url>/2018/05/13/Coding-Interviews-3/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中<strong>任意一个</strong>重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。<br><a id="more"></a></p></blockquote><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li><p>利用一个大小为n的hashmap存储每个数字的个数，当发现数字已经存在的时候，返回。</p></li><li><p>思路1我们发现有题目中的隐藏条件没有用到，即所有得数字都在0-的范围内，则我们可以不需要额外的数据结构就能够实现变量个数的统计。当 nums[nums[i]] == nums[i]时进行处理。</p></li><li>利用一个辅助数组对数据进行存储，避免思路2中数组内元素的交换。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolutionClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 前面记得判断数据有效性 即数据的范围为0-n-1</span></span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] == nums[nums[i]])&#123;</span><br><span class="line">                    <span class="keyword">return</span> nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">                nums[i] = nums[tmp];</span><br><span class="line">                nums[tmp] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不存在重复的</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误总结"><a href="#错误总结" class="headerlink" title="错误总结"></a>错误总结</h2><p><strong> 数据有效性和最后不存在重复的情况 </strong></p>]]></content>
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> Coding Interviews </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CMake syntax</title>
      <link href="/2017/06/01/CMake-syntax/"/>
      <url>/2017/06/01/CMake-syntax/</url>
      <content type="html"><![CDATA[<p><img src="https://pic3.zhimg.com/80/f57298cefba18fca5f31b8762f01d933_hd.jpg" alt="make流程"></p>]]></content>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数字图像处理</title>
      <link href="/2017/05/31/Image-processing/"/>
      <url>/2017/05/31/Image-processing/</url>
      <content type="html"><![CDATA[]]></content>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NachOS4.1 virtulal memary management</title>
      <link href="/2017/05/31/NachOS4-1-virtulal-memary-management/"/>
      <url>/2017/05/31/NachOS4-1-virtulal-memary-management/</url>
      <content type="html"><![CDATA[<h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><ol><li>在Nachos中修改目前的内存分配方式，使得多个线程可以同时存在于内存之中，这些线程可以按照“优先级”的方式进行调度。</li></ol><a id="more"></a><h2 id="基本概念介绍"><a href="#基本概念介绍" class="headerlink" title="基本概念介绍"></a>基本概念介绍</h2><ul><li>虚拟内存</li><li>TLB</li></ul><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><h2 id="程序执行流程"><a href="#程序执行流程" class="headerlink" title="程序执行流程"></a>程序执行流程</h2><h3 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h3><h3 id="需要修改的文件列表"><a href="#需要修改的文件列表" class="headerlink" title="需要修改的文件列表"></a>需要修改的文件列表</h3><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/liu-yiwei/NachOS" target="_blank" rel="noopener">最终代码实现(每提交一次对应一个实验)</a></p><p><a href="http://oqt3wq2vs.bkt.clouddn.com/blog/20170531/153417098.pdf" target="_blank" rel="noopener">Implementing Virtual Memory on Nachos</a></p><p><a href="http://www.wendangku.net/doc/9383d57a5acfa1c7aa00ccd6-11.html" target="_blank" rel="noopener">Nachos 实验11 设计并实现用户空间的虚拟内存管理-上</a></p><p><a href="http://m.wendangku.net/doc/f97f7e6a9b6648d7c1c746b8-13.html" target="_blank" rel="noopener">北大 nachos 考试 虚拟内存实验讲解</a></p><p><a href="http://blog.chinaunix.net/uid-20282925-id-3384481.html" target="_blank" rel="noopener">Nachos LAB3 内存管理试验 报告</a></p><p><a href="http://blog.sina.com.cn/s/blog_4ae8f77f01018n6r.html" target="_blank" rel="noopener">Nachos3.4 Lab3 虚拟内存管理 实习报告 分页式内存管理</a></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
